project(FreesoundUploader VERSION 0.0.1)

set (BaseTargetName FreesoundUploader)

juce_add_plugin("${BaseTargetName}"
        # VERSION ...                               # Set this if the plugin version is different to the project version
        # ICON_BIG ...                              # ICON_* arguments specify a path to an image file to use as an icon for the Standalone
        # ICON_SMALL ...
        COMPANY_NAME "MusicTechnologyGroup"
        IS_SYNTH FALSE
        NEEDS_MIDI_INPUT TRUE
        NEEDS_MIDI_OUTPUT FALSE
        IS_MIDI_EFFECT FALSE
        EDITOR_WANTS_KEYBOARD_FOCUS FALSE
        COPY_PLUGIN_AFTER_BUILD TRUE
        PLUGIN_MANUFACTURER_CODE Juce
        PLUGIN_CODE FrUP
        FORMATS AU VST3 Standalone
        PRODUCT_NAME "Freesound Uploader")


target_sources(${BaseTargetName} PRIVATE
        ../../shared_plugin_helpers/shared_plugin_helpers.cpp
        ../../FreesoundAPI/FreesoundAPI.cpp
        Source/PluginProcessor.cpp
        Source/BinaryData.cpp
)

target_compile_definitions(${BaseTargetName}
        PUBLIC
        JUCE_WEB_BROWSER=1
        JUCE_USE_CURL=0
        JUCE_VST3_CAN_REPLACE_VST2=0)

target_link_libraries(${BaseTargetName} PRIVATE
        shared_plugin_helpers
        juce_recommended_config_flags
        juce_recommended_lto_flags
        juce_recommended_warning_flags)


# -------------------------------------
# Freesound API Configuration Handling
# -------------------------------------

# Path to the FreesoundKeys.h file
set(FREESOUND_KEYS_HEADER "${CMAKE_CURRENT_SOURCE_DIR}/Source/FreesoundKeys.h")

# Check if FreesoundKeys.h exists and contains valid keys
set(NEED_API_SETUP FALSE)

if(NOT EXISTS ${FREESOUND_KEYS_HEADER})
    set(NEED_API_SETUP TRUE)
else()
    # Check if the file contains placeholder values
    file(READ ${FREESOUND_KEYS_HEADER} KEYS_CONTENT)
    if(KEYS_CONTENT MATCHES "INSERT_API_KEY_HERE" OR KEYS_CONTENT MATCHES "INSERT_CLIENT_ID_HERE")
        set(NEED_API_SETUP TRUE)
    endif()
endif()

if(NEED_API_SETUP)
    message(STATUS "\n=== Freesound API Configuration Required ===")
    message(STATUS "FreesoundKeys.h not found or contains placeholder values.")
    message(STATUS "")
    message(STATUS "To use this plugin, you need Freesound API credentials.")
    message(STATUS "Get them at: https://freesound.org/apiv2/apply/")
    message(STATUS "")

    # Prompt for API Key
    if(NOT DEFINED FREESOUND_API_KEY OR FREESOUND_API_KEY STREQUAL "")
        message(STATUS "Enter your Freesound API Key and press Enter:")
        execute_process(
                COMMAND ${CMAKE_COMMAND} -E env bash -c "read -r input && echo \$input"
                OUTPUT_VARIABLE FREESOUND_API_KEY
                OUTPUT_STRIP_TRAILING_WHITESPACE
                ERROR_QUIET
        )
        # Alternative for non-bash systems
        if(FREESOUND_API_KEY STREQUAL "")
            file(WRITE "${CMAKE_BINARY_DIR}/get_input.py"
                    "import sys\n"
                    "try:\n"
                    "    key = input('Enter your Freesound API Key: ')\n"
                    "    print(key)\n"
                    "except:\n"
                    "    pass\n"
            )
            execute_process(
                    COMMAND python3 "${CMAKE_BINARY_DIR}/get_input.py"
                    OUTPUT_VARIABLE FREESOUND_API_KEY
                    OUTPUT_STRIP_TRAILING_WHITESPACE
                    ERROR_QUIET
            )
        endif()
    endif()

    # Validate API Key
    if(FREESOUND_API_KEY STREQUAL "" OR NOT DEFINED FREESOUND_API_KEY)
        message(FATAL_ERROR "\nNo API Key provided. Build aborted.")
    endif()

    # Prompt for Client ID
    if(NOT DEFINED FREESOUND_CLIENT_ID OR FREESOUND_CLIENT_ID STREQUAL "")
        message(STATUS "Enter your Freesound Client ID and press Enter:")
        execute_process(
                COMMAND ${CMAKE_COMMAND} -E env bash -c "read -r input && echo \$input"
                OUTPUT_VARIABLE FREESOUND_CLIENT_ID
                OUTPUT_STRIP_TRAILING_WHITESPACE
                ERROR_QUIET
        )
        # Alternative for non-bash systems
        if(FREESOUND_CLIENT_ID STREQUAL "")
            file(WRITE "${CMAKE_BINARY_DIR}/get_client_id.py"
                    "import sys\n"
                    "try:\n"
                    "    client_id = input('Enter your Freesound Client ID: ')\n"
                    "    print(client_id)\n"
                    "except:\n"
                    "    pass\n"
            )
            execute_process(
                    COMMAND python3 "${CMAKE_BINARY_DIR}/get_client_id.py"
                    OUTPUT_VARIABLE FREESOUND_CLIENT_ID
                    OUTPUT_STRIP_TRAILING_WHITESPACE
                    ERROR_QUIET
            )
        endif()
    endif()

    # Validate Client ID
    if(FREESOUND_CLIENT_ID STREQUAL "" OR NOT DEFINED FREESOUND_CLIENT_ID)
        message(FATAL_ERROR "\nNo Client ID provided. Build aborted.")
    endif()

    # Create the Source directory if it doesn't exist
    file(MAKE_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/Source)

    # Generate the FreesoundKeys.h file with the provided credentials
    file(WRITE ${FREESOUND_KEYS_HEADER}
            "#pragma once\n\n"
            "#define FREESOUND_API_KEY \"${FREESOUND_API_KEY}\"\n"
            "#define FREESOUND_CLIENT_ID \"${FREESOUND_CLIENT_ID}\"\n")

    message(STATUS "✓ FreesoundKeys.h has been generated successfully!")
    message(STATUS "✓ API Key: ${FREESOUND_API_KEY}")
    message(STATUS "✓ Client ID: ${FREESOUND_CLIENT_ID}")
    message(STATUS "")
else()
    message(STATUS "✓ FreesoundKeys.h found with valid configuration")
endif()

# Ensure the directory is included so the file can be found by your code
target_include_directories(${BaseTargetName} PRIVATE Source)

# Add the generated header as a dependency to ensure proper rebuilds
set_property(TARGET ${BaseTargetName} APPEND PROPERTY ADDITIONAL_CLEAN_FILES ${FREESOUND_KEYS_HEADER})